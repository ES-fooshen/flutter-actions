# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "master" branch
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
  
  flutter-actions-android:
    name: flutter related actions for android
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: '11'
    - name: Set versions
      run: |
        version=$(grep '^version:' pubspec.yaml | awk -F"[:+]" '{print $2}' | xargs)
        build_number=$(grep '^version:' pubspec.yaml | awk -F"+" '{print $2}')
        echo "Version: $version"
        echo "Build number: $build_number"

        echo "version=$version" >> $GITHUB_ENV
        echo "build_number=$build_number" >> $GITHUB_ENV

    - name: change env
      run: |
        sed -i "s/title: 'Flutter Demo'/title: 'Flutter Demo2'/g" lib/main.dart
        
    - uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.22.3'
        channel: 'stable'
    - run: flutter --version
    - run: flutter pub get
    - run: flutter build apk
    - uses: r0adkll/sign-android-release@v1
      name: Sign app AAB
      # ID used to access action output
      id: sign_app
      with:
        releaseDirectory: build/app/outputs/bundle/release
        signingKeyBase64: ${{ secrets.SIGNING_KEY }}
        alias: upload
        keyStorePassword: ${{ secrets.KEY_STORE_PASSWORD }}
    - uses: actions/upload-artifact@v4
      with:
        # Name of the artifact to upload.
        # Optional. Default is 'artifact'
        name: ${{ env.version }}

        # A file, directory or wildcard pattern that describes what to upload
        # Required.
        path: ${{steps.sign_app.outputs.signedReleaseFile}}

        # Duration after which artifact will expire in days. 0 means using default retention.
        # Minimum 1 day.
        # Maximum 90 days unless changed from the repository settings page.
        # Optional. Defaults to repository settings.
        retention-days: 1

        # If true, an artifact with a matching name will be deleted before a new one is uploaded.
        # If false, the action will fail if an artifact for the given name already exists.
        # Does not fail if the artifact does not exist.
        # Optional. Default is 'false'
        overwrite: true


    # - uses: muhamedzeema/appgallery-deply-action@main
    #   with:
    #     client-id: ${{secrets.HUAWEI_CLIENT_ID}}
    #     client-key: ${{secrets.HUAWEI_CLIENT_KEY}}
    #     app-id: ${{secrets.HUAWEI_APP_ID}}
    #     file-extension: "aab"
    #     file-path: ${{steps.sign_app.outputs.signedReleaseFile}}
    #     submit: true
    # - uses: r0adkll/upload-google-play@v1.1.3
    #   with:
    #     serviceAccountJsonPlainText: ${{ secrets.SERVICE_ACCOUNT_JSON }}
    #     packageName: co.easystore.pos
    #     releaseFiles: ${{steps.sign_app.outputs.signedReleaseFile}}
    #     track: internal
    #     changesNotSentForReview: true
    #     whatsNewDirectory: android/distribution/whatsnew
  
  
  # flutter-actions-ios:
  #   name: flutter related actions for ios
  #   runs-on: macos-latest
  #   steps:
  #   - uses: actions/checkout@v4
  #   - uses: subosito/flutter-action@v2
  #     with:
  #       flutter-version: '3.22.3'
  #       channel: 'stable'
  #   - run: flutter --version
  #   - run: flutter pub get

  #   - name: Install the Apple certificate and provisioning profile
  #     env:
  #       BUILD_CERTIFICATE_BASE64: ${{ secrets.P12_BASE64 }}
  #       P12_PASSWORD: ${{ secrets.P12_BASE64_PASSWORD }}
  #       BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.MOBILEPROVISION_BASE64 }}
  #       KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
  #     run: |
  #       # create variables
  #       CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
  #       PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
  #       KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

  #       # import certificate and provisioning profile from secrets
  #       echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
  #       echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

  #       # create temporary keychain
  #       security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
  #       security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
  #       security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

  #       # import certificate to keychain
  #       security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
  #       security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
  #       security list-keychain -d user -s $KEYCHAIN_PATH

  #       # apply provisioning profile
  #       mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
  #       cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
    
  #   - name: Set versions
  #     run: |
  #       version=$(grep '^version:' pubspec.yaml | awk -F"[:+]" '{print $2}' | xargs)
  #       build_number=$(grep '^version:' pubspec.yaml | awk -F"+" '{print $2}')
  #       echo "Version: $version"
  #       echo "Build number: $build_number"

  #       echo "version=$version" >> $GITHUB_ENV
  #       echo "build_number=$build_number" >> $GITHUB_ENV

  #       /usr/libexec/PlistBuddy -c "Set :CFBundleVersion $build_number" ios/Runner/Info.plist
  #       /usr/libexec/PlistBuddy -c "Set :CFBundleShortVersionString $version" ios/Runner/Info.plist
    
  #   - name: Build IPA
  #     run: |
  #       xcodebuild -workspace ios/Runner.xcworkspace \
  #         -scheme Runner \
  #         -configuration Release \
  #         -sdk iphoneos \
  #         -archivePath $(PWD)/build/archive/runner.xcarchive \
  #         build \
  #         archive \
  #         -allowProvisioningUpdates
  #   - name: Export IPA
  #     run: |
  #       xcodebuild -exportArchive \
  #         -archivePath $(PWD)/build/archive/runner.xcarchive \
  #         -exportOptionsPlist ios/exportOptions.plist \
  #         -exportPath $(PWD)/build/ipa \
  #   - name: List IPA Directory Contents
  #     run: |
  #       echo "Contents of $(PWD)/build/ipa/:"
  #       ls -l $(PWD)/build/ipa/
  #   - name: Publish to testflight
  #     run: |
  #       xcrun altool --upload-package build/ipa/flutter_default.ipa --type ios --asc-public-id c9c4ba26-bb36-4207-ba23-c37abf3615b9 --apple-id 1499032417 --bundle-id co.easystore.pos --bundle-short-version-string ${{ env.version }} --bundle-version ${{ env.build_number }} -u ${{ secrets.APP_SPECIFIC_USERNAME }} -p ${{ secrets.APP_SPECIFIC_PASSWORD }}

  # flutter-actions-ios:
  #   name: flutter related actions for ios
  #   runs-on: macos-latest
  #   steps:
  #   - uses: actions/checkout@v4
  #   - uses: subosito/flutter-action@v2
  #     with:
  #       flutter-version: '3.22.3'
  #       channel: 'stable'
  #   - run: flutter --version
  #   - run: flutter pub get

  #   - name: Install the Apple certificate and provisioning profile
  #     env:
  #       BUILD_CERTIFICATE_BASE64: ${{ secrets.P12_BASE64 }}
  #       P12_PASSWORD: ${{ secrets.P12_BASE64_PASSWORD }}
  #       BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.MOBILEPROVISION_BASE64 }}
  #       KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
  #     run: |
  #       # create variables
  #       CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
  #       PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
  #       KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

  #       # import certificate and provisioning profile from secrets
  #       echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
  #       echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

  #       # create temporary keychain
  #       security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
  #       security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
  #       security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

  #       # import certificate to keychain
  #       security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
  #       security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
  #       security list-keychain -d user -s $KEYCHAIN_PATH

  #       # apply provisioning profile
  #       mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
  #       cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
    
  #   - name: Set versions
  #     run: |
  #       version=$(grep '^version:' pubspec.yaml | awk -F"[:+]" '{print $2}' | xargs)
  #       build_number=$(grep '^version:' pubspec.yaml | awk -F"+" '{print $2}')
  #       echo "Version: $version"
  #       echo "Build number: $build_number"

  #       echo "version=$version" >> $GITHUB_ENV
  #       echo "build_number=$build_number" >> $GITHUB_ENV

  #       /usr/libexec/PlistBuddy -c "Set :CFBundleVersion $build_number" ios/Runner/Info.plist
  #       /usr/libexec/PlistBuddy -c "Set :CFBundleShortVersionString $version" ios/Runner/Info.plist
    
  #   - name: Build IPA
  #     run: |
  #       xcodebuild -workspace ios/Runner.xcworkspace \
  #         -scheme Runner \
  #         -configuration Release \
  #         -sdk iphoneos \
  #         -archivePath $(PWD)/build/archive/runner.xcarchive \
  #         build \
  #         archive \
  #         -allowProvisioningUpdates
  #   - name: Export IPA
  #     run: |
  #       xcodebuild -exportArchive \
  #         -archivePath $(PWD)/build/archive/runner.xcarchive \
  #         -exportOptionsPlist ios/exportOptions.plist \
  #         -exportPath $(PWD)/build/ipa \
  #   - name: List IPA Directory Contents
  #     run: |
  #       echo "Contents of $(PWD)/build/ipa/:"
  #       ls -l $(PWD)/build/ipa/
  #   - name: Publish to testflight
  #     run: |
  #       cd ios
  #       fastlane ios release
  #     env:
  #       FASTLANE_USER: ${{ secrets.APP_SPECIFIC_USERNAME }}
  #       FASTLANE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
  #       FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD: ${{ secrets.APP_SPECIFIC_PASSWORD }}
        
    
    

    
